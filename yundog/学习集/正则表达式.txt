1.字符判断：
"[0-9]" :从0到9之间的任意字符，"[a-z]","[A-Z]"均可表示之间的任意字符，并且可以多个：[0-9a-zA-Z]．

ex1:
def isDigit(ch):
	return re.search(ch,"[0-9]") != None

//re.search()正则表达式运算函数，判断ch能否与正则表达式[0-9]匹配，可以返回结果，否则返回None

ex2:
def isPhoneNum(str):
	return re.search(str,"[1-9][0-9]{6,7}) != None

//[1-9]表示第一个字符必须是１～９之间的数字字符；{6,7}表示长度在６和之间，[0-9]表示由0~9之间的数字字符组成的字符串(两部分加起来，整个字符串的长度在7和8之间)

ex3:
def findNumStr(str):
	return re.findall(str,'(?<![0-9])[1-9][0-9]{6,7}(?![0-9])')

//(?<![0-9])表示之前不能是[0-9]，(?![0-9])表示之后不能是[0-9];re.findall表示查找所有这样的字符串，整行表示查找电话号码所符合的要求，前面不能为数字，后面不能为数字，中间8位为数字且第一位不能为0.

符号：＂＾＂表示定位到字符串起始位置，＂$＂表示定位到字符串结束位置.

"\X":为转义序列固定前缀,[\x00-\x7F]表示所有的ASCII字符．

元字符与转义:"[","^","-"等均为元字符．非元字符需要跟在"["之后，或者使用"r".
排除型字符组需要使用脱字符"^",且需跟在"["之后．注意：排除型字符数组必须匹配一个字符，不能为空．
ex:
re.search(r"^[^0-9][0-9]$","8")!=None   #=>Faluse
re.search(r"^[^0-9][0-9]$","A8")!=None   #=>True

字符组简记:[0-9]:\d ;  [0-9a-zA-Z]:\w ; [ \t\r\n\v\f]:\s ;大写字母为"非"的意思，\D,\W,\S:表示不匹配[0-9],不匹配[0-9a-zA-Z],不匹配[ \t\r\n\v\f].


2.量词使用:
re.search(r"^\d\d\d\d\d\d$","20A203") !=None
\d需要重复六遍，可以使用量词代替:re.search(r"^\d{6}$","20A203") !=None
也可以单独确定上限或者下限:\d{m,}或者\d{,m}.也可以定义为可出现或者多次出现{0,n}:之前元素可以不出现，也可以出现，最多出现n次(某些语言支持{,n}这种写法.
三个常用量词: +  ?  *
* : {0,}　可能出现，也可能不出现，出现次数没有上限
+ : {1,}  至少出现一次，出现次数没有上限
? : {0,1} 至多出现一次，也可能不出现

ex:
美式英语和英式英语的单词写法有所不同，比如traveler和traveller，如果想要同时兼顾两者，可以使用?:
re.search(r"^travell?er$","traveler") != None  #=>True
re.search(r"^travell?er$","traveller") != None #=>True

使用re.findall()可以提取数据
ex:
print re.findall(r"\d{6}","zipcode1:201203,zipcode2:100859")

#=>['201203','100859']





